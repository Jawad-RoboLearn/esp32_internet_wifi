// ESP-32 Internet
// Connect to Internet
// Read HTML of Google.com

#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_wifi.h"
#include "esp_event_loop.h"
#include "nvs_flash.h"
#include "esp_log.h"

#define max_connect 20

static esp_err_t event_handler(void *ctx, system_event_t *event)
{
    return ESP_OK;
}

static char *getAuthModeName(wifi_auth_mode_t auth_mode)
{
    char *names[] = {"OPEN", "WEP", "WPA_PSK", "WPA_WPA2_PSK", "MAX"};
    return names[auth_mode];
}

// wifi init
void wifi_init()
{
    // init nvs flasH and check the error codes it return
    ESP_ERROR_CHECK(nvs_flash_init());

    // init tcpip
    esp_netif_init();

    // handle even\t loop
    ESP_ERROR_CHECK(esp_event_loop_init(event_handler, NULL));
    
    wifi_init_config_t wifi_config = WIFI_INIT_CONFIG_DEFAULT();

    // tell esp to use the wifi init 
    ESP_ERROR_CHECK(esp_wifi_init(&wifi_config));

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));

    ESP_ERROR_CHECK(esp_wifi_start());

}



void app_main()
{

    // wifi init
    wifi_init();

    // set up the scan structure
    wifi_scan_config_t config_scan_struct = {
        .ssid = 0,
        .bssid = 0,
        .channel = 0,
        .show_hidden = true
    };

    // scan start
    ESP_ERROR_CHECK(esp_wifi_scan_start(&config_scan_struct, true));

    // to display
    wifi_ap_record_t wifi_records[max_connect];

    uint16_t max_records = max_connect;
    ESP_ERROR_CHECK(esp_wifi_scan_get_ap_records(&max_records, wifi_records));

    printf("Found %d access points:\n", max_records);
    printf("           SSID         |   Channel   |   RSSI   |   Auth Mode  \n");
    printf("----------------------------------------------------------------\n");
    for (int i = 0; i < max_records; i++)
    {
        printf("%32s | %7d | %4d | %12s\n", (char *)wifi_records[i].ssid, wifi_records[i].primary, wifi_records[i].rssi, getAuthModeName(wifi_records[i].authmode));
    }


} 